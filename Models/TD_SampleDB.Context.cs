//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NestedToDoApplication.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TD_SampleDBEntities : DbContext
    {
        public TD_SampleDBEntities()
            : base("name=TD_SampleDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MappingTaskList> MappingTaskLists { get; set; }
        public virtual DbSet<MASTERUSER> MASTERUSERs { get; set; }
        public virtual DbSet<ToDoList> ToDoLists { get; set; }
    
        public virtual int sp_DeleteTASKAlongWithList(Nullable<int> taskid, Nullable<int> userid)
        {
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTASKAlongWithList", taskidParameter, useridParameter);
        }
    
        public virtual int sp_DeleteTASKLIST(Nullable<int> todolistID)
        {
            var todolistIDParameter = todolistID.HasValue ?
                new ObjectParameter("TodolistID", todolistID) :
                new ObjectParameter("TodolistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTASKLIST", todolistIDParameter);
        }
    
        public virtual int sp_InsertTASK(string taskName, Nullable<int> status, Nullable<int> mappedlistid, Nullable<int> userid)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var mappedlistidParameter = mappedlistid.HasValue ?
                new ObjectParameter("mappedlistid", mappedlistid) :
                new ObjectParameter("mappedlistid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTASK", taskNameParameter, statusParameter, mappedlistidParameter, useridParameter);
        }
    
        public virtual int sp_InsertTASKLIST(string tdName, Nullable<int> uSERID)
        {
            var tdNameParameter = tdName != null ?
                new ObjectParameter("tdName", tdName) :
                new ObjectParameter("tdName", typeof(string));
    
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTASKLIST", tdNameParameter, uSERIDParameter);
        }
    
        public virtual int sp_InsertUser(string userName, string lastName, string uPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var uPasswordParameter = uPassword != null ?
                new ObjectParameter("UPassword", uPassword) :
                new ObjectParameter("UPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUser", userNameParameter, lastNameParameter, uPasswordParameter);
        }
    
        public virtual ObjectResult<sp_MasterGetUser_Result> sp_MasterGetUser(string userName, string uPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var uPasswordParameter = uPassword != null ?
                new ObjectParameter("UPassword", uPassword) :
                new ObjectParameter("UPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MasterGetUser_Result>("sp_MasterGetUser", userNameParameter, uPasswordParameter);
        }
    
        public virtual ObjectResult<sp_SelectTASKAlongWithList_Result> sp_SelectTASKAlongWithList(Nullable<int> mappedlistid, Nullable<int> userid)
        {
            var mappedlistidParameter = mappedlistid.HasValue ?
                new ObjectParameter("mappedlistid", mappedlistid) :
                new ObjectParameter("mappedlistid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectTASKAlongWithList_Result>("sp_SelectTASKAlongWithList", mappedlistidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SelectTASKLIST_Result> sp_SelectTASKLIST(Nullable<int> mappedUserID)
        {
            var mappedUserIDParameter = mappedUserID.HasValue ?
                new ObjectParameter("MappedUserID", mappedUserID) :
                new ObjectParameter("MappedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectTASKLIST_Result>("sp_SelectTASKLIST", mappedUserIDParameter);
        }
    
        public virtual int sp_UpdateTASKAlongWithList(string taskName, Nullable<int> status, Nullable<int> taskid)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var taskidParameter = taskid.HasValue ?
                new ObjectParameter("Taskid", taskid) :
                new ObjectParameter("Taskid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTASKAlongWithList", taskNameParameter, statusParameter, taskidParameter);
        }
    }
}
